
# Modern Python project configuration
# Works with both pip (Linux) and uv (macOS M4 Pro)

[project]
name = "croatian-rag"
version = "0.1.0"
description = "Croatian RAG system with multilingual support"
authors = [
    {name = "RAG Developer", email = "developer@example.com"}
]
dependencies = [
    # Core RAG dependencies
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    
    # Document processing
    "PyPDF2>=3.0.0",
    "python-docx>=0.8.11",
    
    # Web framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    
    # Data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    
    # Configuration
    "pydantic>=2.0.0",
    "toml>=0.10.2",
    
    # HTTP client
    "requests>=2.31.0",
]

requires-python = ">=3.12"  # Supports both Ubuntu 3.12 and macOS 3.13

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.13.0",
    "mypy>=1.5.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.0",
    "types-toml>=0.10.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
target-version = "py312"  # Compatible with both Ubuntu 3.12 and macOS 3.13
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".tox",
    ".venv",
    "temp_cache",
    "data",
    "notebooks",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
]
# AI-friendly ignores: focus on functional correctness over aesthetics
ignore = [
    "E203",  # whitespace before ':' (Black conflict)
    "E501",  # line too long (handled by Black)
    "W291",  # trailing whitespace (handled by pre-commit)
    "W293",  # blank line contains whitespace (handled by pre-commit)
    "E711",  # comparison to None (== None vs is None - both work)
    "E712",  # comparison to bool (== True vs is True - both work)
    "B008",  # function call in argument defaults (often intentional)
]

[tool.ruff.lint.isort]
known-first-party = ["src"]
split-on-trailing-comma = false  # Compatible with format.skip-magic-trailing-comma=true

[tool.ruff.format]
# AI-friendly formatting: preserve readable patterns
quote-style = "double"
indent-style = "space"
line-ending = "auto"
# Preserve some readable multi-line patterns when beneficial
# Keep trailing commas to prevent unnecessary reformatting
skip-magic-trailing-comma = true

[tool.mypy]
python_version = "3.12"  # Compatible with both Ubuntu 3.12 and macOS 3.13
warn_return_any = false  # AI-friendly: focus on functional correctness
warn_unused_configs = false
disallow_untyped_defs = false
check_untyped_defs = true
# Disable overly pedantic checks that make AI work harder
disable_error_code = "no-any-return,misc,type-abstract"
exclude = [
    "tests/",
    "notebooks/",
    "temp_cache/",
    "data/",
    "src/cli/",  # CLI is non-critical, exclude from type checking
    "scripts/",  # Development scripts, non-critical
    "test_*.py",  # Test files in root
    "extract_*.py",  # Schema extraction utilities
    "dependency_analyzer.py",  # Development utility
    "format_code.py",  # Development utility
    "simplified_*.py",  # Development utilities
    "scripts/batch_process.py",  # Development utility script
]

[tool.black]
line-length = 120
target-version = ["py312"]  # Compatible with both Ubuntu 3.12 and macOS 3.13
# AI-friendly: prevent breaking clean one-liners and type annotations
skip-string-normalization = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
