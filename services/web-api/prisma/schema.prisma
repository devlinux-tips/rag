generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant model - multi-tenant organization
model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique // URL-safe identifier
  status    String   @default("active") // "active", "suspended", "trial"

  // Feature configuration
  features  Json     @default("[]") // Array of enabled feature strings
  settings  Json     @default("{}") // Tenant-specific configuration

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]

  // Indexes
  @@index([status])
  @@index([createdAt])
}

// User model - authentication and authorization
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String   // bcrypt hashed
  name        String
  role        String   @default("user") // "user", "admin", "owner"

  // Multi-tenant relationship
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Authorization
  features    Json     @default("[]") // Array of enabled feature strings for this user
  permissions Json     @default("[]") // Array of permission strings

  // Profile settings
  language    String   @default("hr") // Default language preference
  timezone    String   @default("Europe/Zagreb")
  settings    Json     @default("{}")

  // Security
  emailVerified      Boolean   @default(false)
  emailVerifiedAt    DateTime?
  lastLoginAt        DateTime?
  passwordChangedAt  DateTime  @default(now())

  // Refresh tokens
  refreshTokens RefreshToken[]

  // Relations
  chats      Chat[]

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes
  @@index([tenantId])
  @@index([email])
  @@index([role])
  @@index([createdAt])
}

// Refresh token model - JWT refresh token management
model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique // The actual refresh token
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Token metadata
  deviceInfo  String?  // User agent or device identifier
  ipAddress   String?  // IP address where token was issued

  // Expiration
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  revokedAt   DateTime?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Chat model - stores conversation sessions
model Chat {
  id          String   @id @default(cuid())
  title       String
  feature     String   // e.g., "narodne-novine"
  visibility  String   @default("private") // "private" or "tenant_shared"
  tenantId    String
  userId      String
  language    String   // e.g., "hr", "en"

  // RAG configuration for this chat
  ragConfig   Json     @default("{\"maxDocuments\": 5, \"minConfidence\": 0.7, \"temperature\": 0.7}")

  // Optional metadata
  metadata    Json?    // tags, description, etc.

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastMessageAt DateTime?

  // Relations
  messages    Message[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([tenantId, userId])
  @@index([feature])
  @@index([createdAt])
  @@index([lastMessageAt])
}

// Message model - stores individual messages in chats
model Message {
  id          String   @id @default(cuid())
  chatId      String
  role        String   // "user" or "assistant"
  content     String   @db.Text // Raw markdown content
  feature     String?  // Feature context (for assistant messages)

  // Metadata - different based on role
  metadata    Json?    // For assistant: ragContext, model, tokensUsed, sources, etc.
                      // For user: edited, attachments, etc.

  // Processing status (for async operations)
  status      String   @default("completed") // "pending", "processing", "completed", "failed"
  errorMessage String?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([chatId, createdAt])
  @@index([status])
}

// ProcessingTask model - tracks async RAG processing
model ProcessingTask {
  id          String   @id @default(cuid())
  messageId   String?
  type        String   // "rag_query", "document_retrieval", etc.
  status      String   @default("pending") // "pending", "processing", "completed", "failed"

  // Request/Response data
  request     Json
  response    Json?
  error       Json?

  // Performance metrics
  startedAt   DateTime?
  completedAt DateTime?
  durationMs  Int?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes
  @@index([status])
  @@index([createdAt])
}
