[pytest]
# Pytest configuration for Multilingual RAG System
# Optimized for AI debugging and trace logging

# Test discovery
testpaths =
    services/rag-service/tests
    tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (may require services)
    slow: Slow tests (>1 second)
    weaviate: Tests requiring Weaviate connection
    chromadb: ChromaDB tests (deprecated, being migrated)
    llm: Tests involving LLM operations
    storage: Storage layer tests
    mock_heavy: Tests with extensive mocking
    ai_debug: Tests with enhanced AI debugging

# Output configuration for AI parsing
addopts =
    --strict-markers
    --tb=short
    --color=yes
    -ra
    --maxfail=10
    --import-mode=importlib

# Logging for AI debugging
log_cli = true
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture settings (disable for trace visibility)
capture = no

# AsyncIO configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Coverage settings
[coverage:run]
source = services/rag-service/src
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod

# Fail on missing coverage thresholds
fail_under = 70

[coverage:html]
directory = test_logs/coverage_html